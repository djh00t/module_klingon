name: Docker Build Pre-Checks

on:
  push:
    branches:
      - '*'
    paths:
      - 'openfaas/**'
      - '.github/workflows/openfaas-pre-docker-build-pr.yaml'
      - '.github/workflows/openfaas-docker-build.yaml'
jobs:
  prepare-version-pr:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Calculate new release number
      id: versioning
      run: |
        from build import fetch_latest_tag, increment_version
        image_name = 'djh00t/klingon-serial'  # Replace with your actual image name
        latest_tag = fetch_latest_tag(image_name)
        new_version = increment_version(latest_tag, 'patch')  # Assuming we're doing a patch release
        print(f"::set-output name=new_version::{new_version}")
      shell: python

    - name: Create or update PR with new release number
      uses: peter-evans/create-pull-request@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "Prepare for Docker build version ${{ steps.versioning.outputs.new_version }}"
        title: "Docker Build Version ${{ steps.versioning.outputs.new_version }}"
        body: |
          ## Changelog
          <!-- markdown-changelog-generator -->
        branch: "release-${{ steps.versioning.outputs.new_version }}"
        base: "main"
        labels: "pre-release"
        # update-branch: true
        # title-regex: "Docker Build Version"
        # body-includes-regex: "markdown-changelog-generator"

    - name: Ensure PR depends on this workflow
      uses: actions/github-script@v6
      with:
        script: |
          const { context } = require('@actions/github');
          const pull_number = context.payload.pull_request.number;
          const workflow_id = 'pre-docker-build-pr.yaml';
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: workflow_id,
            ref: context.ref,
            inputs: {
              pull_number: pull_number
            }
          });
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
