name: Post-PR Merge CI

# Controls when the action will run. 
on:
  pull_request:
    types: [closed]
    branches: [main]
  workflow_dispatch:
concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  post-pr-merge:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.x
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          make check-packages
      - name: Build and test
        run: |
          pip install .
          make sdist
          make wheel
          make test
      - name: Check current version on TestPyPI
        id: check_version
        run: |
          echo "Checking current version on TestPyPI..."
          current_version=$(pip index versions --index-url https://test.pypi.org/simple/ klingon-serial | grep -Po '(?<=\().*?(?=\))' | sort -V | tail -n 1)
          echo "Current version on TestPyPI is $current_version"
          IFS='.' read -ra VERSION_PARTS <<< "$current_version"
          VERSION_PARTS[-1]=$((VERSION_PARTS[-1]+1))
          new_version="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.${VERSION_PARTS[2]}"
          echo "New version will be $new_version"
          echo "new_version=$new_version" >> $GITHUB_ENV
      - name: Update version file
        run: |
          echo "${{ env.new_version }}" > VERSION
          cat VERSION
#      - name: Commit and push new version
#        run: |
#          git branch
#          git config --global user.email "action@github.com"
#          git config --global user.name "GitHub Action"
#          git add VERSION
#          git commit -m "Increment version number to ${{ env.new_version }}"
#          git push origin ${{ github.event.pull_request.head.ref }}
      - name: Push to TestPyPI
        if: github.ref == 'refs/heads/main' # This ensures that PyPI upload only happens on main branch merges.  
        run: |
            make upload-test TEST_PYPI_USER_AGENT=${{ secrets.TEST_PYPI_USER_AGENT }} VERSION=${{ env.new_version }}
      - name: Push to PyPI
        if: github.ref == 'refs/heads/main' # This ensures that PyPI upload only happens on main branch merges.
        run: |
          make upload PYPI_USER_AGENT=${{ secrets.PYPI_USER_AGENT }}
